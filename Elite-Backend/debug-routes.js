const axios = require('axios');

async function debugRoutes() {
    const API_URL = 'http://localhost:1337';
    
    try {
        console.log('üîç Debugging Routes...\n');

        // ÿßÿÆÿ™ÿ®ÿßÿ± 1: ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ routes ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©
        console.log('1. Testing available routes...');
        
        // ÿ¨ÿ±ÿ® routes ŸÖÿÆÿ™ŸÑŸÅÿ©
        const routesToTest = [
            '/api/blog-articles',
            '/api/blog-articles/15',
            '/api/blog-articles/15?populate=*',
            '/api/blog-articles/15?populate=*&locale=en'
        ];
        
        for (const route of routesToTest) {
            console.log(`\nTesting: ${route}`);
            try {
                const response = await axios.get(`${API_URL}${route}`);
                console.log(`‚úÖ SUCCESS: ${response.status} - ${JSON.stringify(response.data).substring(0, 100)}...`);
            } catch (error) {
                console.log(`‚ùå FAILED: ${error.response?.status || error.code} - ${error.response?.data?.error?.message || error.message}`);
                
                // ÿ∑ÿ®ÿßÿπÿ© ÿ™ŸÅÿßÿµŸäŸÑ ÿ•ÿ∂ÿßŸÅŸäÿ© ŸÑŸÑÿ£ÿÆÿ∑ÿßÿ°
                if (error.response?.data) {
                    console.log(`   Full error:`, JSON.stringify(error.response.data, null, 2));
                }
            }
        }

        // ÿßÿÆÿ™ÿ®ÿßÿ± 2: ÿ¨ÿ±ÿ® ŸÖÿπ super.findOne
        console.log(`\n2. Testing if routes are configured properly...`);
        
        // ÿßÿÆÿ™ÿ®ÿßÿ± ŸÖÿπ different IDs
        const testIds = [15, 17, 19, 21, 1, 2, 3];
        
        for (const testId of testIds.slice(0, 3)) { // ÿßÿÆÿ™ÿ®ÿßÿ± ÿ£ŸàŸÑ 3 ŸÅŸÇÿ∑
            console.log(`\nTesting ID: ${testId}`);
            try {
                const response = await axios.get(`${API_URL}/api/blog-articles/${testId}`);
                console.log(`‚úÖ ID ${testId}: SUCCESS!`);
                console.log(`   Title: ${response.data.data?.title || 'N/A'}`);
                break; // ÿ•ÿ∞ÿß ŸÜÿ¨ÿ≠ Ÿàÿßÿ≠ÿØÿå ÿ™ŸàŸÇŸÅ
            } catch (error) {
                console.log(`‚ùå ID ${testId}: ${error.response?.status} - ${error.response?.data?.error?.message || error.message}`);
            }
        }

        // ÿßÿÆÿ™ÿ®ÿßÿ± 3: ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ content types
        console.log(`\n3. Checking Strapi content-types...`);
        try {
            const contentTypesResponse = await axios.get(`${API_URL}/api/content-type-builder/content-types`).catch(() => {
                return axios.get(`${API_URL}/admin/content-type-builder/content-types`);
            }).catch(() => {
                console.log('Cannot access content-types endpoint (normal for production)');
                return null;
            });
            
            if (contentTypesResponse) {
                console.log(`‚úÖ Content types accessible`);
            }
        } catch (error) {
            console.log(`Content types not accessible (expected)`);
        }

        console.log(`\nüìã Diagnosis:`);
        console.log(`   - If find works but findOne doesn't: Controller issue`);
        console.log(`   - If all routes fail: Permissions issue`);
        console.log(`   - If some IDs work: Database issue`);
        
        console.log(`\nüí° Next steps:`);
        console.log(`   1. Check Strapi backend console for errors`);
        console.log(`   2. Check if controller findOne method is being called`);
        console.log(`   3. Verify routes configuration`);

    } catch (error) {
        console.log(`‚ùå Debug failed: ${error.message}`);
    }
}

debugRoutes();
