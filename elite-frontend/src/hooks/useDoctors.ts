import { useQuery } from 'react-query';
import { useLanguage } from "@/context/LanguageContext";

// ุชุนุฑูู ุงููุงุฌูุฉ (Interface) ูููุน ุจูุงูุงุช ุงูุฏูุชูุฑ
export interface Doctor {
  id: number;
  documentId: string;
  name: string;
  specialty: string;
  createdAt: string;
  updatedAt: string;
  publishedAt: string;
  image: {
    id: number;
    documentId: string;
    name: string;
    url: string;
    formats: {
      thumbnail?: {
        url: string;
      }
    };
    // ... ุงููุฒูุฏ ูู ุฎุตุงุฆุต ุงูุตูุฑุฉ
  };
}

// ูุงุฌูุฉ ูููุน ุงูุจูุงูุงุช ุงููุฑุฌุนุฉ ูู API
interface DoctorsResponse {
  data: Doctor[];
  meta?: {
    pagination?: {
      page: number;
      pageSize: number;
      pageCount: number;
      total: number;
    };
  };
}

/**
 * Hook ูุฌูุจ ุจูุงูุงุช ุงูุฃุทุจุงุก ูู Strapi API
 */
export const useDoctors = () => {
  const { locale } = useLanguage();
  
  // ุงุณุชุฎุฏุงู React Query ูุฌูุจ ุงูุจูุงูุงุช
  const { data, isLoading, error } = useQuery<any, Error>(
    ['doctors', locale], // ููุชุงุญ ุงูุชุฎุฒูู ุงููุคูุช (ูุชุบูุฑ ูุน ุชุบูุฑ ุงููุบุฉ)
    async () => {
      // ุงุณุชุฎุฏุงู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ูุชุญุฏูุฏ ุงูู API ุงูุฃุณุงุณู
      const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:1337';
      const IMAGE_BASE = process.env.NEXT_PUBLIC_IMAGE_BASE_URL || API_BASE;
      // ุฅุถุงูุฉ ูุนููุงุช ุงููุบุฉ ุฅูู ุนููุงู URL ููุญุตูู ุนูู ุงูุจูุงูุงุช ุจูุบุฉ ุงููุณุชุฎุฏู ุงูุญุงููุฉ
      const url = `${API_BASE}/api/doctor-homes?populate=image&locale=${locale}`;      
      
      console.log('๐ ูุญุงููุฉ ุงููุตูู ููุฑุงุจุท:', url);
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error('ูุดู ูู ุฌูุจ ุจูุงูุงุช ุงูุฃุทุจุงุก');
      }
      
      const responseData = await response.json();
      
      // ุนุฑุถ ุจูุงูุงุช ุงูุงุณุชุฌุงุจุฉ ุงูุฃุตููุฉ ูู API ูู ูุญุฏุฉ ุงูุชุญูู
      console.log('๐ ุจูุงูุงุช ุงูุฃุทุจุงุก ูู API:', responseData);
      console.log('๐ ูููู ุจูุงูุงุช ุงูุฏูุชูุฑ ุงูุฃูู ูู API:', responseData.data?.[0]);
      
      return responseData;
    },
    {
      refetchOnWindowFocus: false, // ุนุฏู ุฅุนุงุฏุฉ ุงูุฌูุจ ุนูุฏ ุงูุชุฑููุฒ ุนูู ุงููุงูุฐุฉ
      staleTime: 5 * 60 * 1000, // ุชุนุชุจุฑ ุงูุจูุงูุงุช ูุฏููุฉ ุจุนุฏ 5 ุฏูุงุฆู
    }
  );
  
  // ุชุญููู ุงูุจูุงูุงุช ููุตูุบุฉ ุงููุทููุจุฉ
  const formattedDoctors = data?.data.map((doctor, index) => {
    // ุทุจุงุนุฉ ุงูุจูุงูุงุช ุงูุฃุตููุฉ ูููุณุงุนุฏุฉ ูู ุงูุชุตุญูุญ
    console.log('๐ ุงูุจูุงูุงุช ุงูุฃุตููุฉ ููุฏูุชูุฑ:', doctor);
    
    // ูุตูููุฉ ูู ุงูุตูุฑ ุงูุงูุชุฑุงุถูุฉ ููุฃุทุจุงุก
    const defaultImages = [
      '/DoctorsSections/Asset 28-.png',
      '/DoctorsSections/Asset 29-.png', 
      '/DoctorsSections/Asset 30-.png'
    ];
    
    const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:1337';
    const IMAGE_BASE = process.env.NEXT_PUBLIC_IMAGE_BASE_URL || API_BASE;
    const formattedDoctor = {
      id: doctor?.id,
      documentId: doctor?.documentId,
      // ุงูุชุนุงูู ูุจุงุดุฑุฉ ูุน ุงูุจูุงูุงุช ุนูู ุงููุณุชูู ุงูุฃุนูู ุจุฏูุงู ูู attributes
      name: doctor?.name || `ุฏูุชูุฑ ${index + 1}`,
      specialty: doctor?.specialty || 'ุฃุฎุตุงุฆู ุจูุทุฑู',
      // ุงุณุชุฎุฏุงู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ ุจูุงุกู ุนูู ุงูููุฑุณ ุฃู ูู ุงูุจูุงูุงุช ุฅุฐุง ูุงูุช ูุชููุฑุฉ
      image: doctor?.image?.url 
        ? `${IMAGE_BASE}${doctor.image.url}`
        : defaultImages[index % defaultImages.length] // ุชูุฒูุน ุงูุตูุฑ ุงูุงูุชุฑุงุถูุฉ
    };
    
    // ุนุฑุถ ุจูุงูุงุช ุงูุฏูุชูุฑ ุจุนุฏ ุงูุชุญููู ูู ูุญุฏุฉ ุงูุชุญูู
    console.log('โ ุจูุงูุงุช ุงูุฏูุชูุฑ ุจุนุฏ ุงูุชุญููู:', formattedDoctor);
    
    return formattedDoctor;
  }) || [];
  
  return {
    doctors: data?.data || [],
    isLoading,
    error,
    formattedDoctors
  };
};

export default useDoctors;
